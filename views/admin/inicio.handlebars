<style>

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  min-height: 100vh;
}

#liData{
  display: flex;
  justify-content: center !important;
  align-items: end;
  margin-right: 1rem;
}


#data{
  color: rgb(30, 21, 46) !important;
  display: contents;
  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
}

#ini{
  display: none;
}

#sobre{
  display: none;
}

#retornarP{
  display: none;
}

#sair{
  display: none;
}

.container {
  margin-top: 7vh;
  display: flex;
  flex: 1;
  flex-direction: row; /* Alinha o conteúdo horizontalmente por padrão */
  flex-wrap: wrap; /* Permite quebra para telas menores */
  width: 100%;
}

  #lateral { 
  width: 100%;
  align-items: center;
  justify-content: start;
  height: 3rem;
  border: none;
  margin-bottom: 7rem;
}

#cardMeio{
  display: flex;
  justify-content: space-evenly;
  gap: 4rem;
  
}

.menuLink{
  display: flex;
  text-decoration: none;
  color:#221f36;
}

.content {
  flex: 1; /* Main ocupa o restante do espaço disponível */
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.div2 {
  background-color: aliceblue;
  
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap; /* Quebra linhas automaticamente */
  gap: 1rem; /* Espaçamento entre os itens */
  padding: 1rem;
  height: 80vh;
}

.divInfo {
  background-color: #9eacff;
  margin-top: 7vh;
  text-align: center;
  border: 1px solid #363535;
  width: 11rem;
  height: 6rem;
  padding: 1rem;
}

#divInfo{
  display: flex;
  justify-content: space-around;
  width: 100%;
}

footer {
  background: #221f36;
  color: #fff;
  text-align: center;
  padding: 1rem;
}

#imgLogo{
  width: 8rem;
  height: 5rem;
}

#home{
  display: none;
}

/* Responsividade */
/*Para telas com tamanho max ate 768*/
@media (max-width: 768px) {
  .container {
    flex-direction: column; /* Alinha verticalmente para telas menores */
  }


  #divInfo{
    gap: 2rem;
  }
}

/*Para telas com tamanho max ate 480*/
@media (max-width: 480px) {
  body{
    justify-content: center;
  }
  main{
    margin-left: -2rem;
  }
  .divInfo {
    margin-top: 9rem;
    width: 8rem;
    height: 4rem;
    padding: 0.4rem;
  }

  .navbar ul {
    flex-direction: column; /* Navbar em coluna */
    gap: 10px;
  }

  aside{
    width: 100vw;
  }

  #lateral{
    margin-top: 2rem;
  }
  footer{
    margin-top: 8rem;
  }

  #imgLogo{
  width: 10rem;
  height: 5rem;
}

}

/*Para telas com tamanho max ate 280*/
@media (max-width: 280px) {
  #imgLogo{
  width: 10.5rem;
  height: 5.5rem;
}
}


</style>


<!--Corpo principal da paguna-->
  <div class="container">
    
    <main class="content">
        <div id="lateral" class="card">

         <!--Card onde fica os botoes de paginas-->
          <div class="card-body" id="cardMeio">
            
            <p><a href="#" class="#">
              <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="#221f36" class="bi bi-house-door" viewBox="0 0 16 16">
                <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4z"/>
              </svg>
            </a></p>
            
            <p><a href="/admin/estoqueMateriais" class="menuLink">
              <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="#221f36" class="bi bi-box" viewBox="0 0 16 16">
                <path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5 8 5.961 14.154 3.5zM15 4.239l-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464z"/>
              </svg>
            </a></p>
            
            <p><a href="/admin/ordemServico" class="menuLink">
              <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="#221f36" class="bi bi-card-checklist" viewBox="0 0 16 16">
                <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2z"/>
                <path d="M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0M7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0"/>
              </svg>
            </a></p>
            
            
            <p><a href="/admin/perfil" class="menuLink">
              <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="#221f36" class="bi bi-person-circle" viewBox="0 0 16 16">
                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/>
                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"/>
              </svg>
              
            </a></p>

            <p><a href="/admin/logout" class="menuLink">
              <svg xmlns="http://www.w3.org/2000/svg" width="26"0 height="26"0 fill="#221f36" class="bi bi-box-arrow-in-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0z"/>
                <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z"/>
              </svg>
            </a></p>

          </div>
        </div>

      <!--Card principal dos gráficos-->
      <div class="div2">
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Estoque</h5>
                <canvas id="graficoEstoque"></canvas>
            </div>
        </div>

        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Ordens de Serviço</h5>
                <canvas id="graficoOS"></canvas>
            </div>
        </div>

        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Desempenho</h5>
                <canvas id="graficoDesempenho"></canvas>
            </div>
        </div>

        <!--Cards para cores de acordo com a quantidade-->
        <div id="divInfo">
          <div class="divInfo" id="cardEstoque">
            <h4>Estoque</h4>
              <p id="paraEstoque">xxx</p>
          </div>
          <div class="divInfo" id="cardOS">
            <h4>O.S</h4>
              <p id="paraOS">xxx</p>
          </div>
          <div class="divInfo" id="cardDesempenho">
            <h4>Desenpenho</h4>
              <p id="paraDesempenho">xxx</p>
          </div>
        </div>
      </div>

      <!--Rodapé da pagina-->
      <footer>
        <p>© 2024 - Estoque Facil</p>
      </footer>

    </main>  
  </div>


<!--Script para carregar os dados e criar o gráfico-->
<script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
<script>
    async function carregarDados() {
        try {
            // Buscar dados do backend
            const materiais = await (await fetch('/admin/estoqueMateriais/json')).json();
            const equipamentos = await (await fetch('/admin/estoqueEquipamentos/json')).json();
            const ordensServico = await (await fetch('/admin/ordemServico/dados')).json();

            // Somar os materiais e equipamentos para o gráfico de estoque
            const totalMateriais = materiais.reduce((acc, item) => acc + item.qtd, 0);
            const totalEquipamentos = equipamentos.reduce((acc, item) => acc + item.qtd, 0);
            const totalOS = ordensServico.reduce((acc, os) => acc + (os.qtd || 1), 0); // Considera "1" se não houver campo `quantidade`
            const totalPontuacao = ordensServico.reduce((acc, os) => acc + (os.pontuacao || 1), 0);

            // Criar gráfico de Estoque
            new Chart(document.getElementById('graficoEstoque').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['Materiais', 'Equipamentos'],
                    datasets: [{
                        label: 'Estoque Total',
                        data: [totalMateriais, totalEquipamentos],
                        backgroundColor: ['blue', 'green']
                    }]
                }
            });

            // **Ajuste Aqui** → Criar gráfico de Ordens de Serviço com total correto
            const ctx = document.getElementById('graficoOS').getContext('2d');

            let backgroundColor;

            if (totalPontuacao <= 100) {
                backgroundColor = 'red';
            } else if (totalPontuacao <= 200) {
                backgroundColor = 'blue';
            } else {
                backgroundColor = 'green'; // Corrigi a escrita de 'green'
            }

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Pontuação'],
                    datasets: [{
                        label: 'Quantidade Total de Pontos',
                        data: [totalPontuacao],
                        backgroundColor: [backgroundColor]
                    }]
                }
            });


            // Criar gráfico de Desempenho (baseado na quantidade de O.S concluídas)
            const desempenho = totalOS;
            
            new Chart(document.getElementById('graficoDesempenho').getContext('2d'), {
                type: 'line',
                data: {
                    labels: ['Total O.S', 'Concluídas'],
                    datasets: [{
                        label: 'Desempenho',
                        data: [totalOS, desempenho], // Compara total de O.S com concluídas
                        borderColor: 'purple',
                        fill: false
                    }]
                }
            });

            

        } catch (error) {
            console.error('Erro ao carregar os dados:', error);
        }
    }

    document.addEventListener("DOMContentLoaded", carregarDados);
</script>


<!--Script para carregar os dados e mudar os cards com sua cores-->
<script>
  async function carregarDados() {
      try {
          // Buscar dados do backend
          const materiais = await (await fetch('/admin/estoqueMateriais/json')).json();
          const ordensServico = await (await fetch('/admin/ordemServico/dados')).json();

          const totalOS = ordensServico.reduce((acc, os) => acc + (os.qtd || 1), 0);
          const desempenho = totalOS;

          // Somar a quantidade total das ordens de serviço
          
          const totalMateriais = materiais.reduce((acc, item) => acc + item.qtd, 0);
          const totalPontuacao = ordensServico.reduce((acc, os) => acc + (os.pontuacao || 1), 0);
          

          // Garantir que os elementos existem antes de tentar modificar
          const cardEstoque = document.getElementById('cardEstoque');
          const paraEstoque = document.getElementById('paraEstoque');
          const cardOS = document.getElementById('cardOS');
          const paraOS = document.getElementById('paraOS');
          const cardDesempenho = document.getElementById('cardDesempenho');
          const paradeSempenho = document.getElementById('paraDesempenho');


          // Aplicar a lógica de cores Pontuação
          if (totalPontuacao >= 200) {
              cardOS.style.background = 'green';
              cardOS.style.color = 'white';
              paraOS.innerText = 'Bom'; 

          }else if (totalPontuacao >= 100 ) {
              cardOS.style.background = 'blue';
              cardOS.style.color = 'white';
              paraOS.innerText = 'Razoável';

          }else {
              cardOS.style.background = 'red';
              cardOS.style.color = 'white';
              paraOS.innerText = 'Ruim';
            
          }


          //Lógica para Desempenho
          if ( desempenho >= 100) {        
              cardDesempenho.style.background = 'green';
              cardDesempenho.style.color = 'white';
              paradeSempenho.innerText = 'Bom';
              
          }else if ( desempenho >= 70) {
              cardDesempenho.style.background = 'blue';
              cardDesempenho.style.color = 'white';
              paradeSempenho.innerText = 'Razoável';

          }else {       
              cardDesempenho.style.background = 'red';
              cardDesempenho.style.color = 'white';
              paradeSempenho.innerText = 'Ruim';
          }


          //Lógica para Estoque
          if(totalMateriais >= 1200) {
              cardEstoque.style.background = 'green';
              cardEstoque.style.color = 'white';
              paraEstoque.innerText = 'Bom';
              
          }else if(totalMateriais >= 900){
              cardEstoque.style.background = 'blue';
              cardEstoque.style.color = 'white';
              paraEstoque.innerText = 'Razoável'

          }else{
              cardEstoque.style.background = 'red';
              cardEstoque.style.color = 'white';
              paraEstoque.innerText = 'Ruim'
          }

      } catch (error) {
          console.error('Erro ao carregar os dados:', error);
      }
  }

  document.addEventListener("DOMContentLoaded", carregarDados);
</script>